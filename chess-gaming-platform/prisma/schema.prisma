// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  phone         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  balance       Float     @default(0)
  tokenBalance  Int       @default(0)
  lichessLink   String?
  chessComLink  String?
  accountStatus String    @default("active")
  roles         String    @default("player") // JSON string for roles
  isOnline      Boolean   @default(false)
  lastSeenAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  createdChallenges   Challenge[] @relation("ChallengeCreator")
  acceptedChallenges  Challenge[] @relation("ChallengeOpponent")
  sentTransactions    Transaction[] @relation("TransactionSender")
  receivedTransactions Transaction[] @relation("TransactionReceiver")
  withdrawalRequests  WithdrawalRequest[] @relation("WithdrawalInitiator")
  handledWithdrawals  WithdrawalRequest[] @relation("WithdrawalModerator")
  notifications       Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Platform {
  id         String      @id @default(cuid())
  name       String      @unique
  link       String
  status     String      @default("active")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  challenges Challenge[]
}

model Challenge {
  id                String    @id @default(cuid())
  userId            String
  opponentId        String?
  requestState      String    @default("pending") // pending, accepted, rejected, canceled, disputed
  position          String?   // challenger, opponent
  views             Int       @default(0)
  challengeStatus   String    @default("pending") // pending, won, draw, loss, anomaly
  stake             Float     @default(0)
  tokens            Int       @default(0)
  platformId        String
  timeControl       String    @default("5+0")
  challengerReady   Boolean   @default(false)
  contenderReady    Boolean   @default(false)
  acceptedAt        DateTime?
  rejectedAt        DateTime?
  canceledAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user       User        @relation("ChallengeCreator", fields: [userId], references: [id], onDelete: Cascade)
  opponent   User?       @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  platform   Platform    @relation(fields: [platformId], references: [id])
  transactions Transaction[]
}

model WithdrawalRequest {
  id                  String   @id @default(cuid())
  initiator           String
  moderatorAccountId  String
  requestStatus       String   @default("pending")
  notes               String?  // JSON string
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  initiatorUser User          @relation("WithdrawalInitiator", fields: [initiator], references: [id])
  moderator     User          @relation("WithdrawalModerator", fields: [moderatorAccountId], references: [id])
  transactions  Transaction[]
}

model Transaction {
  id                           String   @id @default(cuid())
  requestType                  String
  requestId                    String?
  transactionOrigin            String
  transactionDestination       String
  amount                       Float
  currency                     String   @default("KES")
  deliveryConfirmationStatus   Boolean  @default(false)
  transactionStage             String   @default("initiated")
  confirmationStatus           Boolean  @default(false)
  transactionCompleteStatus    Boolean  @default(false)
  transactionNotes             String?  // JSON string
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  sender            User               @relation("TransactionSender", fields: [transactionOrigin], references: [id])
  receiver          User               @relation("TransactionReceiver", fields: [transactionDestination], references: [id])
  challenge         Challenge?         @relation(fields: [requestId], references: [id])
  withdrawalRequest WithdrawalRequest? @relation(fields: [requestId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  details   String?
  routeName String?
  routeParams String? // JSON string
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}